name: Flutter CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    # Only run on main branch pushes - staging skips this completely
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check version against last release
        run: |
          # Extract current version from pubspec.yaml
          # CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          # More robust
          CURRENT_VERSION=$(awk -F':[[:space:]]*' '/^[[:space:]]*version:/ {print $2; exit}' pubspec.yaml)

          echo "🔍 Validating release version..."
          echo "Current version in pubspec.yaml: $CURRENT_VERSION"
          
          # Get last production release tag (with 'v' prefix)
          LAST_RELEASE_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 1 || echo "")
          
          if [ -n "$LAST_RELEASE_TAG" ]; then
            LAST_RELEASE_VERSION=${LAST_RELEASE_TAG#v}  # Remove 'v' prefix
            echo "Last production release: $LAST_RELEASE_VERSION (tag: $LAST_RELEASE_TAG)"
            echo ""
          
            if [ "$CURRENT_VERSION" = "$LAST_RELEASE_VERSION" ]; then
              echo "❌ ERROR: Version conflict detected!"
              echo ""
              echo "Version in pubspec.yaml ($CURRENT_VERSION) is the same as the last production release ($LAST_RELEASE_VERSION)"
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "📝 Action Required:"
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo "Please update the version in pubspec.yaml before releasing."
              echo ""
              echo "Current:  version: $CURRENT_VERSION"
              echo "Example:  version: 1.2.4+46"
              echo ""
              echo "ℹ️  Note: Staging tags are excluded from this check."
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              exit 1
            else
              echo "✅ Version validation passed!"
              echo "   Current version ($CURRENT_VERSION) is different from last release ($LAST_RELEASE_VERSION)"
            fi
          else
            echo "ℹ️  No previous production release tags found."
            echo "✅ This will be the first production release."
          fi

  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    # Version management runs on all pushes, no dependency on validate-version
    if: github.event_name == 'push'
    outputs:
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}
      full_version: ${{ steps.version.outputs.full_version }}
      branch_type: ${{ steps.version.outputs.branch_type }}
      current_date: ${{ steps.version.outputs.current_date }}
      project_name: ${{ steps.version.outputs.project_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract project name from pubspec.yaml
        id: extract-project-name
        run: |
          # Get branch info
          BRANCH=${GITHUB_REF#refs/heads/}
          if [ "$BRANCH" = "main" ]; then
            BRANCH_TYPE="release"
          else
            BRANCH_TYPE="staging"
          fi
          echo "branch_type=$BRANCH_TYPE" >> $GITHUB_OUTPUT
          
          # Get project name from pubspec.yaml
          # PROJECT_NAME=$(grep '^name:' pubspec.yaml | sed 's/name: //' | tr -d ' ')
          # More robust
          PROJECT_NAME=$(awk -F':[[:space:]]*' '/^[[:space:]]*name:/ {print $2; exit}' pubspec.yaml)
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          
          # Get current date (YYYY-MM-DD format)
          CURRENT_DATE=$(date +%Y-%m-%d)
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
          
          # Extract base version from pubspec.yaml
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          BASE_VERSION=$(echo $CURRENT_VERSION | cut -d'+' -f1 | cut -d'-' -f1)
          
          # Get git commit info
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          if [ "$BRANCH" = "main" ]; then
            # MAIN BRANCH: Manual version control
            # Format: X.Y.Z+BUILD (e.g., 1.2.3+45)
            VERSION_CODE=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          
            # Validate version format
            if [ -z "$BASE_VERSION" ] || [ -z "$VERSION_CODE" ]; then
              echo "❌ Error: Invalid version format in pubspec.yaml"
              echo "Expected format: version: X.Y.Z+BUILD (e.g., version: 1.2.3+45)"
              exit 1
            fi
          
            VERSION_NAME="$BASE_VERSION"
            FULL_VERSION="${BASE_VERSION}+${VERSION_CODE}"
          
            echo "🚀 Production Release (Manual Control)"
            echo "Version Name: $VERSION_NAME"
            echo "Version Code: $VERSION_CODE"
          
          else
            # STAGING BRANCH: Automatic incremental version
            # Format: X.Y.Z-staging+BUILD.HASH (e.g., 1.2.3-staging+127.b5e9f1a)
            STAGING_BUILD_COUNT=$(git rev-list --count origin/staging 2>/dev/null || echo $COMMIT_COUNT)
            VERSION_CODE=$STAGING_BUILD_COUNT
          
            VERSION_NAME="${BASE_VERSION}-staging"
            FULL_VERSION="${BASE_VERSION}-staging+${STAGING_BUILD_COUNT}.${COMMIT_HASH}"
          
            echo "🔧 Staging Build (Auto-increment)"
            echo "Version Name: $VERSION_NAME"
            echo "Version Code: $VERSION_CODE"
            echo "Full Version: $FULL_VERSION"
          fi
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Version Information"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Project:      $PROJECT_NAME"
          echo "Version:      $FULL_VERSION"
          echo "Branch Type:  $BRANCH_TYPE"
          echo "Date:         $CURRENT_DATE"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  test-and-analyze:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    # Test runs on all events (push and pull_request), no dependency on validate-version
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Enhanced caching for pub dependencies
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: pub-deps-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            pub-deps-${{ runner.os }}-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ runner.os }}-3.32.8

      - name: Install dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --set-exit-if-changed .
        continue-on-error: true

      - name: Analyze code
        run: flutter analyze --fatal-infos

      - name: Run unit and widget tests
        run: flutter test --coverage --reporter expanded

      - name: Check test coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "✅ Coverage report generated"
            # You can add coverage threshold checks here
          else
            echo "⚠️ No coverage data found"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info
          retention-days: 30

      # Save complete workspace for build job (optimized)
      # Use always() to ensure cache is saved even if formatting check fails with continue-on-error
      - name: Save workspace for build job
        if: always()
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            build
          key: workspace-${{ github.sha }}-${{ runner.os }}

  build-android:
    name: Build Android (${{ needs.version-management.outputs.branch_type }})
    runs-on: ubuntu-latest
    needs: [ version-management, test-and-analyze ]
    # Only run on push events when both dependencies succeeded
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Restore complete workspace from test job (includes Flutter SDK, pub cache, and build artifacts)
      - name: Restore workspace from test job
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            build
          key: workspace-${{ github.sha }}-${{ runner.os }}
          fail-on-cache-miss: false

      # Lightweight Flutter setup (reuses cached SDK)
      - name: Setup Flutter (from cache)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          cache: true
          cache-key: flutter-${{ runner.os }}-3.32.8

      # Skip pub get - dependencies already in cache from test job!
      # This saves significant time on every build

      - name: Build APK (Always)
        run: |
          echo "📱 Building APK for ${{ needs.version-management.outputs.branch_type }}"
          flutter build apk --release \
            --build-name=${{ needs.version-management.outputs.version_name }} \
            --build-number=${{ needs.version-management.outputs.version_code }}

      - name: Build AAB (Release Only)
        if: needs.version-management.outputs.branch_type == 'release'
        run: |
          echo "Building AAB for Play Store"
          flutter build appbundle --release \
            --build-name=${{ needs.version-management.outputs.version_name }} \
            --build-number=${{ needs.version-management.outputs.version_code }}

      - name: Rename artifacts
        run: |
          # Get variables
          PROJECT_NAME="${{ needs.version-management.outputs.project_name }}"
          FULL_VERSION="${{ needs.version-management.outputs.full_version }}"
          BRANCH_TYPE="${{ needs.version-management.outputs.branch_type }}"
          CURRENT_DATE="${{ needs.version-management.outputs.current_date }}"
          
          # Format: {projectname}-{version}-{release/staging}-{date}.apk
          APK_NAME="${PROJECT_NAME}-${FULL_VERSION}-${BRANCH_TYPE}-${CURRENT_DATE}.apk"
          
          echo "📝 Renaming APK to: $APK_NAME"
          cp build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/${APK_NAME}
          
          # Rename AAB only for release builds
          if [ "$BRANCH_TYPE" = "release" ]; then
            AAB_NAME="${PROJECT_NAME}-${FULL_VERSION}-${BRANCH_TYPE}-${CURRENT_DATE}.aab"
            echo "📝 Renaming AAB to: $AAB_NAME"
            cp build/app/outputs/bundle/release/app-release.aab \
               build/app/outputs/bundle/release/${AAB_NAME}
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}-apk
          path: build/app/outputs/flutter-apk/${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}.apk
      #          retention-days: 30

      - name: Upload AAB artifact (Release Only)
        if: needs.version-management.outputs.branch_type == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}-aab
          path: build/app/outputs/bundle/release/${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}.aab
          retention-days: 30

  release-staging:
    name: Release to Staging
    runs-on: ubuntu-latest
    needs: [ version-management, build-android ]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}-apk
          path: ./artifacts

      - name: Create Staging Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version-management.outputs.full_version }}
          name: Staging ${{ needs.version-management.outputs.full_version }} (${{ needs.version-management.outputs.current_date }})
          body: |
            ## 🔧 Staging Build
            
            **Full Version:** `${{ needs.version-management.outputs.full_version }}`
            **Version Code:** `${{ needs.version-management.outputs.version_code }}`
            **Branch:** `staging`
            **Build Date:** `${{ needs.version-management.outputs.current_date }}`
            **Commit:** `${{ github.sha }}`
            
            ### 📝 Changes
            ${{ github.event.head_commit.message }}
            
            ### 📦 Build Info
            - Project: `${{ needs.version-management.outputs.project_name }}`
            - Flutter Version: `3.32.8`
            
            ### 📥 Download
            - **APK**: `${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-staging-${{ needs.version-management.outputs.current_date }}.apk`
            
            ---
            ⚠️ **This is a staging build for internal testing only**
          files: |
            ./artifacts/${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-staging-${{ needs.version-management.outputs.current_date }}.apk
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-production:
    name: Release to Production
    runs-on: ubuntu-latest
    needs: [ version-management, build-android ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}-apk
          path: ./artifacts

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}-aab
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Production Release with Tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-management.outputs.full_version }}
          name: Release v${{ needs.version-management.outputs.full_version }} (${{ needs.version-management.outputs.current_date }})
          body: |
            ## 🚀 Production Release
            
            **Full Version:** `${{ needs.version-management.outputs.full_version }}`
            **Version Code:** `${{ needs.version-management.outputs.version_code }}`
            **Release Date:** `${{ needs.version-management.outputs.current_date }}`
            **Commit:** `${{ github.sha }}`
            
            ### 📝 Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ### 📦 Build Info
            - Project: `${{ needs.version-management.outputs.project_name }}`
            - Flutter Version: `3.32.8`
            - Branch: `main`
            
            ### 📥 Downloads
            - **APK**: `${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-release-${{ needs.version-management.outputs.current_date }}.apk`
            - **AAB**: `${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-release-${{ needs.version-management.outputs.current_date }}.aab`
            
            ---
            ✅ **Ready for Google Play Store deployment**
          files: |
            ./artifacts/${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-release-${{ needs.version-management.outputs.current_date }}.apk
            ./artifacts/${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-release-${{ needs.version-management.outputs.current_date }}.aab
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [ version-management, test-and-analyze, build-android, release-staging, release-production ]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Generate summary
        run: |
          echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** \`${{ needs.version-management.outputs.project_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Full Version:** \`${{ needs.version-management.outputs.full_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version Code:** \`${{ needs.version-management.outputs.version_code }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** \`${{ needs.version-management.outputs.branch_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** \`${{ needs.version-management.outputs.current_date }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "**APK:** \`${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}.apk\`" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.version-management.outputs.branch_type }}" = "release" ]; then
            echo "**AAB:** \`${{ needs.version-management.outputs.project_name }}-${{ needs.version-management.outputs.full_version }}-${{ needs.version-management.outputs.branch_type }}-${{ needs.version-management.outputs.current_date }}.aab\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: \`${{ needs.test-and-analyze.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build: \`${{ needs.build-android.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.version-management.outputs.branch_type }}" = "release" ]; then
            echo "🚀 **Production build completed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔧 **Staging build completed**" >> $GITHUB_STEP_SUMMARY
          fi