name: Flutter CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

permissions:
  contents: write
  pull-requests: write

jobs:
  version-management:
    name: Version Management
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_name: ${{ steps.version.outputs.version_name }}
      build_number: ${{ steps.version.outputs.build_number }}
      branch: ${{ steps.version.outputs.branch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate version
        id: version
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
          # Get current version from pubspec.yaml
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          VERSION_NAME=$(echo $CURRENT_VERSION | cut -d'+' -f1 | cut -d'-' -f1)
          
          # Get git commit info
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          if [ "$BRANCH" = "main" ]; then
            # MAIN BRANCH: Manual version control (no auto-increment)
            # Developer must manually update version in pubspec.yaml
            # Format: X.Y.Z+BUILD.HASH
          
            # Extract current build number or use commit count
            CURRENT_BUILD=$(echo $CURRENT_VERSION | grep -oP '\+\K[0-9]+' || echo "0")
            BUILD_NUMBER=$((CURRENT_BUILD + 1))
          
            NEW_VERSION="${VERSION_NAME}+${BUILD_NUMBER}.${COMMIT_HASH}"
          
            echo "üöÄ Production Release"
            echo "Version: $NEW_VERSION"
            echo "Note: Version $VERSION_NAME is manually controlled in pubspec.yaml"
          
          elif [ "$BRANCH" = "staging" ]; then
            # STAGING BRANCH: Auto-increment build number with suffix
            # Format: X.Y.Z-staging+BUILD.HASH
          
            # Auto-increment build number based on staging commits
            STAGING_BUILD_COUNT=$(git rev-list --count origin/staging 2>/dev/null || echo $COMMIT_COUNT)
            BUILD_NUMBER=$STAGING_BUILD_COUNT
          
            NEW_VERSION="${VERSION_NAME}-staging+${BUILD_NUMBER}.${COMMIT_HASH}"
          
            echo "üîß Staging Build"
            echo "Version: $NEW_VERSION"
            echo "Build auto-incremented: $BUILD_NUMBER"
          
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          # Update pubspec.yaml
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
          
          cat pubspec.yaml | grep "^version:"

      - name: Upload versioned pubspec
        uses: actions/upload-artifact@v4
        with:
          name: pubspec-${{ steps.version.outputs.branch }}
          path: pubspec.yaml
          retention-days: 5

  test-and-analyze:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --set-exit-if-changed .
        continue-on-error: true

      - name: Analyze code
        run: flutter analyze --fatal-infos

      - name: Run unit and widget tests
        run: flutter test --coverage --reporter expanded

      - name: Check test coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "‚úÖ Coverage report generated"
            # You can add coverage threshold checks here
          else
            echo "‚ö†Ô∏è No coverage data found"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info
          retention-days: 30

  build-android:
    name: Build Android (${{ needs.version-management.outputs.branch }})
    runs-on: ubuntu-latest
    needs: [ version-management, test-and-analyze ]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download versioned pubspec
        uses: actions/download-artifact@v4
        with:
          name: pubspec-${{ needs.version-management.outputs.branch }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK for ${{ needs.version-management.outputs.branch }}
        run: |
          if [ "${{ needs.version-management.outputs.branch }}" = "main" ]; then
            echo "üöÄ Building production APK"
            flutter build apk --release \
              --build-name=${{ needs.version-management.outputs.version_name }} \
              --build-number=${{ needs.version-management.outputs.build_number }}
          else
            echo "üîß Building staging APK"
            flutter build apk --release \
              --build-name=${{ needs.version-management.outputs.version_name }} \
              --build-number=${{ needs.version-management.outputs.build_number }}
          fi

      - name: Build AAB for ${{ needs.version-management.outputs.branch }}
        run: |
          if [ "${{ needs.version-management.outputs.branch }}" = "main" ]; then
            echo "üöÄ Building production AAB"
            flutter build appbundle --release \
              --build-name=${{ needs.version-management.outputs.version_name }} \
              --build-number=${{ needs.version-management.outputs.build_number }}
          else
            echo "üîß Building staging AAB"
            flutter build appbundle --release \
              --build-name=${{ needs.version-management.outputs.version_name }} \
              --build-number=${{ needs.version-management.outputs.build_number }}
          fi

      - name: Rename artifacts
        run: |
          BRANCH=${{ needs.version-management.outputs.branch }}
          VERSION=${{ needs.version-management.outputs.version }}
          
          # Rename APK
          cp build/app/outputs/flutter-apk/app-release.apk \
             build/app/outputs/flutter-apk/app-${BRANCH}-${VERSION}.apk
          
          # Rename AAB
          cp build/app/outputs/bundle/release/app-release.aab \
             build/app/outputs/bundle/release/app-${BRANCH}-${VERSION}.aab

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ needs.version-management.outputs.branch }}-${{ needs.version-management.outputs.version }}
          path: build/app/outputs/flutter-apk/app-${{ needs.version-management.outputs.branch }}-${{ needs.version-management.outputs.version }}.apk
          retention-days: 30

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: aab-${{ needs.version-management.outputs.branch }}-${{ needs.version-management.outputs.version }}
          path: build/app/outputs/bundle/release/app-${{ needs.version-management.outputs.branch }}-${{ needs.version-management.outputs.version }}.aab
          retention-days: 30

  release-staging:
    name: Release to Staging
    runs-on: ubuntu-latest
    needs: [ version-management, build-android ]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: apk-staging-${{ needs.version-management.outputs.version }}
          path: ./artifacts

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: aab-staging-${{ needs.version-management.outputs.version }}
          path: ./artifacts

      - name: Create Staging Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: staging-v${{ needs.version-management.outputs.version }}
          name: Staging Release v${{ needs.version-management.outputs.version }}
          body: |
            ## üîß Staging Build
            
            **Version:** `${{ needs.version-management.outputs.version }}`
            **Branch:** `staging`
            **Commit:** `${{ github.sha }}`
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Build Info
            - Build Number: `${{ needs.version-management.outputs.build_number }}`
            - Flutter Version: `3.24.0`
            - Build Date: `${{ github.event.head_commit.timestamp }}`
            
            ---
            ‚ö†Ô∏è **This is a staging build for internal testing only**
          files: |
            ./artifacts/app-staging-${{ needs.version-management.outputs.version }}.apk
            ./artifacts/app-staging-${{ needs.version-management.outputs.version }}.aab
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-production:
    name: Release to Production
    runs-on: ubuntu-latest
    needs: [ version-management, build-android ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: apk-main-${{ needs.version-management.outputs.version }}
          path: ./artifacts

      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: aab-main-${{ needs.version-management.outputs.version }}
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Production Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-management.outputs.version }}
          name: Release v${{ needs.version-management.outputs.version_name }}
          body: |
            ## üöÄ Production Release
            
            **Version:** `${{ needs.version-management.outputs.version_name }}`
            **Build Number:** `${{ needs.version-management.outputs.build_number }}`
            **Branch:** `main`
            **Commit:** `${{ github.sha }}`
            
            ### üìù Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### üì¶ Build Info
            - Flutter Version: `3.24.0`
            - Release Date: `${{ github.event.head_commit.timestamp }}`
            
            ### üì• Downloads
            - **APK**: For direct installation and testing
            - **AAB**: For Google Play Store distribution
            
            ---
            ‚úÖ **Ready for production deployment**
          files: |
            ./artifacts/app-main-${{ needs.version-management.outputs.version }}.apk
            ./artifacts/app-main-${{ needs.version-management.outputs.version }}.aab
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add pubspec.yaml
          git commit -m "chore: bump version to ${{ needs.version-management.outputs.version }} [skip ci]" || echo "No changes to commit"
          git push origin main || echo "Nothing to push"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [ version-management, test-and-analyze, build-android ]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Generate summary
        run: |
          echo "## üìä Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ needs.version-management.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.version-management.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number:** \`${{ needs.version-management.outputs.build_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: \`${{ needs.test-and-analyze.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build: \`${{ needs.build-android.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.version-management.outputs.branch }}" = "main" ]; then
            echo "üöÄ **Production build completed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîß **Staging build completed**" >> $GITHUB_STEP_SUMMARY
          fi